"""
Middleware

You can add middleware to FastAPI applications.

A "middleware" is a function that works with every request before it is processed by any specific path operation.
And also with every response before returning it.

It takes each request that comes to your application.
It can then do something to that request or run any needed code.
Then it passes the request to be processed by the rest of the application (by some path operation).
It then takes the response generated by the application (by some path operation).
It can do something to that response or run any needed code.
Then it returns the response.

Technical Details
If you have dependencies with yield, the exit code will run after the middleware.
If there were any background tasks (documented later), they will run after all the middleware

To create a middleware you use the decorator @app.middleware("http") on top of a function.
The middleware function receives:
The request.
A function call_next that will receive the request as a parameter.
This function will pass the request to the corresponding path operation.
Then it returns the response generated by the corresponding path operation.
You can then modify further the response before returning it.
"""

import time

from fastapi import FastAPI, Request

app = FastAPI()


@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    # code to run before response
    start_time = time.time()
    
    response = await call_next(request)
    # code to run after response
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response
